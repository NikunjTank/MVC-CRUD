//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MVCWebApplicationTest1.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TestingSample1Entities : DbContext
    {
        public TestingSample1Entities()
            : base("name=TestingSample1Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual int CountryAdd(string countryName, Nullable<int> createdBy, ObjectParameter result)
        {
            var countryNameParameter = countryName != null ?
                new ObjectParameter("CountryName", countryName) :
                new ObjectParameter("CountryName", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CountryAdd", countryNameParameter, createdByParameter, result);
        }
    
        public virtual int CountryDelete(Nullable<int> countryID, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CountryDelete", countryIDParameter, modifiedByParameter, result);
        }
    
        public virtual ObjectResult<CountryGet_Result> CountryGet(Nullable<int> countryId)
        {
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CountryGet_Result>("CountryGet", countryIdParameter);
        }
    
        public virtual int CountryUpdate(Nullable<int> countryID, string countryName, Nullable<int> modifiedBy, ObjectParameter result)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var countryNameParameter = countryName != null ?
                new ObjectParameter("CountryName", countryName) :
                new ObjectParameter("CountryName", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CountryUpdate", countryIDParameter, countryNameParameter, modifiedByParameter, result);
        }
    
        public virtual int HobbyAdd(string hobbyName, ObjectParameter result)
        {
            var hobbyNameParameter = hobbyName != null ?
                new ObjectParameter("HobbyName", hobbyName) :
                new ObjectParameter("HobbyName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("HobbyAdd", hobbyNameParameter, result);
        }
    
        public virtual int HobbyDelete(Nullable<int> hobbyId, ObjectParameter result)
        {
            var hobbyIdParameter = hobbyId.HasValue ?
                new ObjectParameter("HobbyId", hobbyId) :
                new ObjectParameter("HobbyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("HobbyDelete", hobbyIdParameter, result);
        }
    
        public virtual ObjectResult<HobbyGet_Result> HobbyGet(Nullable<int> hobbyId)
        {
            var hobbyIdParameter = hobbyId.HasValue ?
                new ObjectParameter("HobbyId", hobbyId) :
                new ObjectParameter("HobbyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HobbyGet_Result>("HobbyGet", hobbyIdParameter);
        }
    
        public virtual int HobbyUpdate(Nullable<int> hobbyId, string hobbyName, ObjectParameter result)
        {
            var hobbyIdParameter = hobbyId.HasValue ?
                new ObjectParameter("HobbyId", hobbyId) :
                new ObjectParameter("HobbyId", typeof(int));
    
            var hobbyNameParameter = hobbyName != null ?
                new ObjectParameter("HobbyName", hobbyName) :
                new ObjectParameter("HobbyName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("HobbyUpdate", hobbyIdParameter, hobbyNameParameter, result);
        }
    
        public virtual int StateAdd(string stateName, Nullable<int> countryId, ObjectParameter result)
        {
            var stateNameParameter = stateName != null ?
                new ObjectParameter("StateName", stateName) :
                new ObjectParameter("StateName", typeof(string));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("StateAdd", stateNameParameter, countryIdParameter, result);
        }
    
        public virtual int StateDelete(Nullable<int> stateID, ObjectParameter result)
        {
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("StateDelete", stateIDParameter, result);
        }
    
        public virtual ObjectResult<StateGet_Result> StateGet(Nullable<int> stateId, Nullable<int> countryId)
        {
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(int));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StateGet_Result>("StateGet", stateIdParameter, countryIdParameter);
        }
    
        public virtual int StateUpdate(Nullable<int> stateID, string stateName, Nullable<int> countryId, ObjectParameter result)
        {
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var stateNameParameter = stateName != null ?
                new ObjectParameter("StateName", stateName) :
                new ObjectParameter("StateName", typeof(string));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("StateUpdate", stateIDParameter, stateNameParameter, countryIdParameter, result);
        }
    
        public virtual ObjectResult<AdminProfileGet_Result> AdminProfileGet(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AdminProfileGet_Result>("AdminProfileGet", userIdParameter);
        }
    
        public virtual ObjectResult<UserLogin_Result> UserLogin(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserLogin_Result>("UserLogin", usernameParameter, passwordParameter);
        }
    
        public virtual int UserProfileAdd(string username, string password, string firstName, string lastName, string phone, Nullable<int> countryId, ObjectParameter result)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("CountryId", countryId) :
                new ObjectParameter("CountryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserProfileAdd", usernameParameter, passwordParameter, firstNameParameter, lastNameParameter, phoneParameter, countryIdParameter, result);
        }
    
        public virtual ObjectResult<UserProfileGet_Result> UserProfileGet(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserProfileGet_Result>("UserProfileGet", userIdParameter);
        }
    }
}
